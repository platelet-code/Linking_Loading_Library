1. 系统调用是应用程序(运行库也是应用程序的一部分)与操作系统内核之间的接口, 它决定了应用程序是如何与内核打交道的. 无论程序是
直接进行系统调用, 还是通过运行库, 最终还是会到达系统调用这个层面上.


2.  Windows系统是完全基于DLL机制的, 它通过DLL对系统调用进行了包装, 形成了所谓的 Windows API. 应用程序所能看到的Windows系统的
最底层的接口就是 Windows API.


3. 为了让应用程序有能力访问系统资源, 也为了让程序借助操作系统做一些必须由操作系统支持的行为, 每个操作系统都会提供一套接口, 以供
应用程序使用. 这些接口往往通过中断来实现, 比如Linux使用 0x80 号中断作为系统调用的入口, Windows采用 0x2E 号中断作为系统调用入口.


4. 系统调用涵盖的范围很广, 有程序运行所必需的支持, 例如创建/退出进程和线程, 进程内存管理, 也有对系统资源的访问, 例如文件, 网络,
进程间通信, 硬件设备的访问, 也可能有对图形界面的操作支持, 例如 Windows 下的 GUI 机制.


5. 在x86下, 系统调用由0x80中断完成, 各个通用寄存器用于传递参数, EAX寄存器用于表示系统调用的接口号, 比如 
    - EAX = 1 表示退出进程 (exit)         void _exit(int status);
    - EAX = 2 表示创建进程 (fork)         pid_t fork(void);
    - EAX = 3 表示读取文件或 IO (read)    ssize_t read(int fd, void *buf, size_t count)
    - EAX = 4 表示写文件或 IO (write)     ssize_t write(inf fd, const void *buf, size_t count)
    - EAX = 5 表示打开文件 (open)         int open(const char *pathname, int flags, mode_t mode)
    - EAX = 6 表示关闭文件 (close)        int close(int fd)
    - EAX = 7 表示等待进程退出 (waitpid)   pid_t waitpid(pid_t pid, int *status, int options)
    - EAX = 8 表示创建文件 (creat)        int creat(const char *pathname, mode_t mode)
每个系统调用都对应于内核源代码中的一个函数, 它们都是以 sys_ 开头的. 当系统调用返回时, EAX 又作为调用结果的返回值.
权限管理(sys_setuid), 定时器(sys_times_create), 信号(sys_sigaction), 网络(sys_epoll)
