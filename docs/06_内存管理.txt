1. 一般来讲, 应用程序使用的内存空间里有如下默认布局:
    - 栈: 栈用于维护函数调用的上下文, 离开了栈函数调用就没法实现.
    - 堆: 堆是用来容纳应用程序动态分配的内存区域, 当程序使用 malloc 或 new 分配内存时, 得到的内存来自堆里.
    - 可执行文件映像: 存储着可执行文件在内存里的映像.
    - 保留区: 保留区并不是一个单一的内存区域, 而是对内存中受到保护而禁止访问的内存区域的总称.


2. 在计算机系统中, 栈是一个具有以上属性的动态内存区域. 程序可以将数据压入栈中, 也可以将数据从栈顶弹出. 压栈操作使得栈增大, 而弹出操作使得
   栈减小. 在经典的操作系统中, 栈总是向下增长的.
    - 栈保存了一个函数调用所需要的维护信息, 这常常被称为堆栈帧或活动记录. 堆栈帧一般包括如下内容:
        (1) 函数的返回地址和参数.
        (2) 临时变量: 包括函数的非静态局部变量以及编译器自动生成的其他临时变量.
        (3) 保存的上下文: 包括在函数调用前后需要保持不变的寄存器.
    - esp寄存器始终指向栈的顶部, 同时也就指向了当前函数的活动记录的顶部. 而相对的, ebp寄存器指向了函数活动记录的一个固定位置, ebp寄存器
      又被称为帧指针.


3. 调用惯例: 函数的调用方和被调用方对于函数如何调用必须要有一个明确的约定, 只有双方都遵守同样的约定, 函数才能被正确的调用.
    - 函数参数的传递顺序和方式
    - 栈的维护方式
    - 名字修饰的策略
    - 事实上, 在C语言里, 存在着多个调用惯例, 而默认的调用惯例是 cdecl. 任何一个没有显示指定调用惯例的函数都默认是 cdecl惯例.
          -> int _cdecl foo(int n, float m);
    - stdcall, fastcall, pascal 调用惯例.
    - C++自己还有一种特殊的调用惯例, 称为 thiscall, 专门用于类成员函数的调用.


4. 函数返回值传递
    - 除了参数的传递之外, 函数与调用方的交互还有一个渠道就是返回值. eax是传递返回值的通道. 对于返回5-8字节对象的情况, 几乎所有的调用惯例
      都是采用 eax 和 edx 联合返回的方式进行.
    - 如果返回值类型的尺寸太大, C语言在函数返回时会使用一个临时的栈上内存区域作为中转, 结果返回值对象会被拷贝两次.


5. 堆与内存管理
    - 栈上的数据在函数返回的时候就会被释放掉, 所以无法将数据传递至函数外部. 而全局变量没有办法动态的产生, 只能在编译的时候定义.
    - 堆是一块巨大的内存空间, 常常占据整个虚拟内存区域的绝大部分. 在这片空间里, 程序可以请求一块连续内存, 并自由地使用, 这块内存在程序主动
      放弃之前都会一直保持有效.
    - Linux下的进程堆管理稍微有些复杂, 因为它提供了两种堆空间分配的方式, 即两个系统调用: 一个是brk()系统调用, 另外一个是mmap(). brk()的
      C语言形式声明如下:    int brk(void *end_data_segment)
    - brk()的作用实际上就是设置进程数据段的结束地址, 即它可以扩大或者缩小数据段. 如果我们将数据段的结束地址向高地址移动, 那么扩大的那部分
      空间就可以被我们使用, 把这块空间拿来作为堆空间是最常见的做法之一.
    - mmap()的作用和Windows系统下的VirtualAlloc很相似, 它的作用就是向操作系统申请一段虚拟地址空间, 当然这块虚拟地址空间可以映射到某个文件,
      当它不将地址空间映射到某个文件时, 我们又称这块空间为匿名空间, 匿名空间就可以拿来作为堆空间.
          void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset)
      mmap的前两个参数分别用于指定需要申请的空间的起始地址和长度, 如果起始地址设置为0, 那么Linux系统会自动挑选合适的起始地址. prot/flags这
      两个参数用于设置申请的空间的权限(可读, 可写, 可执行)以及映射类型(文件映射, 匿名空间等), 最后两个参数是用于文件映射时指定文件描述符和
      文件偏移的.


6. glibc的malloc函数处理用户的空间请求: 对于小于128KB的请求来说, 它会在现有的堆空间里面, 按照堆分配算法为他分配一块空间并返回; 对于大于128KB
   的请求来说, 它会使用mmap()函数为它分配一块匿名空间, 然后在这个匿名空间中为用户分配空间.
    void *malloc(size_t nbytes)
    {
        void *ret = mmap(0, nbytes, FROT_READ | FROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0);
        if (ret == MAP_FAILED) {
            return 0;
        }
        return ret;
    }


7. - Windows的进程地址空间分配给了各种EXE, DLL文件, 堆, 栈. 每个线程的栈都是独立的, 所以一个进程中有多少个线程, 就应该有多少个对应的栈, 对于
   Windows来说, 每个线程默认的栈大小是1MB, 在线程启动时, 系统会为它在进程地址空间中分配相应的空间作为栈, 线程栈的大小可以由创建线程时
   CreateThread的参数指定.

   - Windows系统提供了一个API叫做VirtualAlloc(), 用来向系统申请空间, 它与Linux下的mmap非常相似. 实际上VirtualAlloc()申请的空间不一定只用于
   堆, 它仅仅是向系统预留了一块虚拟地址, 应用程序可以按照需要随意使用.

   - 在使用 VirtualAlloc()函数申请空间时, 系统要求空间大小必须为页的整数倍.

   - 堆管理器提供了一套与堆相关的API可以用来创建, 分配, 释放和销毁堆空间.
      (1) HeapCreate: 创建一个堆  (2) HeapAlloc: 在一个堆里分配内存  (3) HeapFree: 释放已经分配的内存  (4) HeapDestroy: 摧毁一个堆

   - 堆管理器存在于Windows的两个位置, 一份是位于NTDLL.DLL中, 这个DLL是Windows操作系统用户层的最底层DLL, 它负责Windows子系统DLL与Windows
     内核之间的接口, 所有用户程序, 运行时库和子系统的堆分配都使用这部分的代码; 而在Windows内核 Ntoskrnl.exe中, 还存在一份类似的堆管理器,
     它负责Windows内核中的堆空间分配, Windows内核, 内核组件, 驱动程序使用堆时用到的都是这份堆分配代码, 内核堆管理器的接口都是由RtlHeap开头.

   - 每个进程在创建时都会有一个默认堆, 这个堆在进程启动时创建, 并且直到进程结束都一直存在. 默认堆的大小为1MB, 不过我们可以通过链接器的/HEAP
     参数指定可执行文件的默认堆大小, 这样系统在创建进程时就会按照可执行文件所指定的大小创建默认堆.

8. 堆分配算法
    - 空闲链表: 空闲链表的方法实际上就是把堆中各个空闲的块按照链表的方式连接起来, 当用户请求一块空间时, 可以遍历整个列表, 直到找到合适大小的块
      并且将它拆分; 当用户释放空间时将它合并到空闲链表中.
    - 位图: 核心思想是将整个堆划分为大量的块, 每个块的大小相同. 当用户请求内存的时候, 总是分配整数个块的空间给用户, 第一个块我们称为已分配区域
      头, 其余的称为已分配区域的主体. 而我们可以使用一个整数数组来记录块的使用情况, 由于每个块只有头/主体/空闲三种状态, 因此仅仅需要两位即可表示
      一个块, 因此称为位图.
    - 实际上很多现实应用中, 堆的分配算法往往是采取多种算法复合而成的. 比如对于glibc来说, 它对于小于64字节的空间申请是采用类似于对象池的方法; 而
      对于大于512字节的空间申请采用的是最佳适配算法; 对于大于64字节而小于512字节的, 它会根据情况采取上述方法中的最佳折中策略; 而对于128KB的申请,
      它会使用mmap机制直接向操作系统申请空间.
